
#   user  system elapsed 
#  0.060   0.060  53.872
library('parallel')

#calulcate number of cores
no_cores <- detectCores()-5

#initiate number of clusters
cl <- makeCluster(no_cores)

prob1 <- function(...) {
#if functions are under the same folder as data, do the following: 
pattern<-"sub.*txt"
file.names<-grep(pattern, list.files(),value=TRUE)
#test<-read.table("sub100206.txt")
#dim(test)##4800 * 15
test<-function(file){
cor_mat<-cor(read.table(file))
names<-colnames(cor_mat)
matsub<-function(y){unlist(lapply(1:15,function(x) 0.5*log((1+cor_mat[y,x])/(1-cor_mat[y,x]))))}
mats<-matrix(unlist(lapply(1:15, function(y) matsub(y))),15,15)
colnames(mats)<-names;rownames(mats)<-names
diag(mats)<-0
return(mats)
}
return(parLapply(cl, file.names, test))
}


#   user  system elapsed 
#  0.065   0.065  53.834 
library('parallel')

#calulcate number of cores
no_cores <- detectCores()-5

#initiate number of clusters
cl <- makeCluster(no_cores)


prob1 <- function(...) {
  pattern <- "sub.*txt"
  filenames <- grep(pattern, list.files(), value = TRUE)
  
  #function on each filename
  fTrans <- function(filename) {
    tab <- read.table(filename) #data
    mat <- cor(tab) #correlation matrix
    mat <- (1/2)*(log((1 + mat)/(1-mat)))
    diag(mat) <- 0
    return(mat)
  }
  
  result<-parLapply(cl, filenames, fTrans)
  names(result)<-as.numeric(substring(filenames,4,9))
  n<-as.numeric(substring(filenames,4,9))
  
  ##sort the F_s matrix for prob1()
  result[order(n)]
  return(result)
}
system.time(mat_Fs<-prob1())

#Question 2:

prob2<-function(){
  mat_Fs<-prob1()
  names<-colnames(mat_Fs[[1]])
  ylist<-as.vector(mapply(rep,1:15,15))
  zlist<-rep(1:15,15)
  mean_mat<-matrix(mapply(function(y,z) cbind(mean(mapply(function(x) mat_Fs[[x]][y,z],1:820))),ylist,zlist),15,15,byrow=TRUE)
  var_mat<-matrix(mapply(function(y,z) cbind(var(mapply(function(x) mat_Fs[[x]][y,z],1:820))),ylist,zlist),15,15,byrow=TRUE)
  
  colnames(mean_mat)<-names;rownames(mean_mat)<-names
  colnames(var_mat)<-names;rownames(var_mat)<-names
  
  return(list(mean_mat,var_mat))
}
system.time(result<-prob2())

#Question 3:

prob3<-function(){
  ##from problem 1, our result for prob1() has already been sorted
  mat_Fs<-prob1()

  names<-colnames(mat_Fs[[1]])
  ylist<-as.vector(mapply(rep,1:15,15))
  zlist<-rep(1:15,15)
  F_train<-matrix(mapply(function(y,z) cbind(mean(mapply(function(x) mat_Fs[[x]][y,z],1:410))),ylist,zlist),15,15,byrow=TRUE)
  F_test<-matrix(mapply(function(y,z) cbind(mean(mapply(function(x) mat_Fs[[x]][y,z],411:820))),ylist,zlist),15,15,byrow=TRUE)
  
  colnames(F_train)<-names;rownames(F_train)<-names
  colnames(F_test)<-names;rownames(F_test)<-names
  
  return(list(F_train,F_test))
}
system.time(result<-prob3())
